name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 9 * * 6'

jobs:
  prettier:
    name: Prettier
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node lts/*
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - name: Restore node_modules
        id: node_modules-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
      - name: Set NPM cache directory
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: npm set cache .npm
      - name: Restore NPM cache
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: .npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm
      - name: Install dependencies
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Prettier
        run: npm run format:check
  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    needs:
      - prettier
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node lts/*
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - name: Restore node_modules
        id: node_modules-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
      - name: Set NPM cache directory
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: npm set cache .npm
      - name: Restore NPM cache
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: .npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm
      - name: Install dependencies
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: ESLint
        run: npm run lint:eslint
  svelte-check:
    name: Svelte Check
    runs-on: ubuntu-latest
    needs:
      - prettier
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node lts/*
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - name: Restore node_modules
        id: node_modules-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
      - name: Set NPM cache directory
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: npm set cache .npm
      - name: Restore NPM cache
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: .npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm
      - name: Install dependencies
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Svelte Check
        run: npm run check:ci
  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - eslint
      - svelte-check
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node lts/*
        uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - name: Restore node_modules
        id: node_modules-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
      - name: Set NPM cache directory
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: npm set cache .npm
      - name: Restore NPM cache
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: .npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm
      - name: Install dependencies
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build
        run: npm run build:ci
      - name: Upload build artifact
        if: github.ref_name == 'main' && !contains(github.event.head_commit.message, '[No Deploy]')
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build
  deploy:
    name: Deploy to GitHub Pages
    if: github.ref_name == 'main' && !contains(github.event.head_commit.message, '[No Deploy]')
    runs-on: ubuntu-latest
    needs:
      - build
    timeout-minutes: 5
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: GitHub Pages
      url: ${{ steps.deployment.outputs.page_url}}
    steps:
      - name: Log actor
        run: echo ${{ github.actor }}
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload build artifact to pages
        uses: actions/upload-pages-artifact@v1
        with:
          path: build
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
